name: Build and deploy prod version Wallkit Integration Library

on:
  push:
    branches:
      - feature/setup-github-actions

env:
  S3_BUCKET: wallkit-integration-test
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          npm install

      - name: Build project
        run: |
          echo "Building project"
          npm run build

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Deploy to S3
        run: |
          S3_BUCKET="wallkit-integration-test"
          DEPLOYING_VERSION=${{ steps.package-version.outputs.current-version }}"
          SYNC_DIR="./dist/."
          FILE_NAME_LIBRARY="wallkit-integration-library.min.js"
        
          echo "DEPLOYING_VERSION: $DEPLOYING_VERSION"
          
          LATEST_CDN_VERSION=$(aws s3 ls s3://${S3_BUCKET}/ | grep -v "latest" | sort -Vr | head -n 1 | sed -n -e 's/^.*PRE \([^\/]*\)\//\1/p')
          if [ -z "$LATEST_CDN_VERSION" ];
          then
            LATEST_CDN_VERSION="0.0.0"
          fi
          echo "LATEST_CDN_VERSION: $LATEST_CDN_VERSION"
        
          # Check if the version already exists in the S3 bucket
          total_found_objects=$(aws s3 ls s3://${S3_BUCKET}/${DEPLOYING_VERSION}/${FILE_NAME_LIBRARY} --summarize | grep "Total Objects: " | sed 's/[^0-9]*//g')
          echo "total_found_objects: $total_found_objects"
          if [ $total_found_objects == 0 ];
          then
            echo "DEPLOYING_VERSION $DEPLOYING_VERSION does not exists."
          else
            echo "DEPLOYING_VERSION $DEPLOYING_VERSION already exists."
          fi
          
          aws s3 sync $SYNC_DIR s3://$S3_BUCKET/$DEPLOYING_VERSION/ --exclude '*.html' --exclude '*.txt'
          
          compareResult=$(bash ../semver2.sh $DEPLOYING_VERSION $LATEST_CDN_VERSION)
          echo "compareResult: $compareResult"
          
          if [ $compareResult == 0 ];
          then
            echo "DEPLOYING_VERSION equals LATEST_CDN_VERSION. Creating symlink."
            aws s3 cp s3://$S3_BUCKET/$DEPLOYING_VERSION/ s3://$S3_BUCKET/latest/ --recursive
          fi
          
          if [ $compareResult == 1 ];
          then
            echo "DEPLOYING_VERSION greater than LATEST_CDN_VERSION. Creating symlink."
            aws s3 cp s3://$S3_BUCKET/$DEPLOYING_VERSION/ s3://$S3_BUCKET/latest/ --recursive
          fi
          
          if [ $compareResult == -1 ];
          then
            echo "DEPLOYING_VERSION lower than LATEST_CDN_VERSION. Not creating symlink."
          fi
